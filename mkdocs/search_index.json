{
    "docs": [
        {
            "location": "/", 
            "text": "Rebilly JS Token Library\n\n\nRebilly.js powers your checkout form and removes the need to send sensitive customer information directly to your servers. Use the library to generate payment tokens to reduce the scope of PCI DSS compliance.\n\n\nRebilly API Spec\n\n\nThe library uses the payment token endpoint from the Rebilly API. See the \nRebilly API spec\n for more details. \n\n\nIncluding Rebilly.js\n\n\nAdd Rebilly.js to your page using one of the following CDN providers, preferably at the bottom before the \n/body\n. \n\n\n\n\nAlways use \nHTTPS\n when including the library.\n\n\n\n\nUNPKG CDN\n\n\nscript\n \nsrc\n=\nhttps://unpkg.com/rebilly-js-token/dist/rebilly.js\n/\nscript\n\n\n\n\n\njsDelivr CDN\n\n\nscript\n \nsrc\n=\nhttps://cdn.jsdelivr.net/npm/rebilly-js-token/dist/rebilly.min.js\n/\nscript\n\n\n\n\n\nSemver\n\n\nThe JS SDK is released following \nSemver 2.0.0\n guidelines. Each minor and patch version will be backward-compatible and incompatible changes will be introduced using major releases only.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#rebilly-js-token-library", 
            "text": "Rebilly.js powers your checkout form and removes the need to send sensitive customer information directly to your servers. Use the library to generate payment tokens to reduce the scope of PCI DSS compliance.", 
            "title": "Rebilly JS Token Library"
        }, 
        {
            "location": "/#rebilly-api-spec", 
            "text": "The library uses the payment token endpoint from the Rebilly API. See the  Rebilly API spec  for more details.", 
            "title": "Rebilly API Spec"
        }, 
        {
            "location": "/#including-rebillyjs", 
            "text": "Add Rebilly.js to your page using one of the following CDN providers, preferably at the bottom before the  /body .    Always use  HTTPS  when including the library.   UNPKG CDN  script   src = https://unpkg.com/rebilly-js-token/dist/rebilly.js / script   jsDelivr CDN  script   src = https://cdn.jsdelivr.net/npm/rebilly-js-token/dist/rebilly.min.js / script", 
            "title": "Including Rebilly.js"
        }, 
        {
            "location": "/#semver", 
            "text": "The JS SDK is released following  Semver 2.0.0  guidelines. Each minor and patch version will be backward-compatible and incompatible changes will be introduced using major releases only.", 
            "title": "Semver"
        }, 
        {
            "location": "/getting-started/", 
            "text": "Getting Started\n\n\nThe library must be inserted in the page you will use to handle payment instrument data for either payment cards or bank accounts. \n\n\n\n\nServer-side SDK\n\n\nYou must use one of the official Rebilly server-side SDKs to generate a public signature from your secret API key. See \nAuthentication\n for more details.\n\n\n\n\nIncluding Rebilly.js\n\n\nAdd Rebilly.js to your page using one of the following CDN providers, preferably at the bottom before the \n/body\n. \n\n\n\n\nAlways use \nHTTPS\n when including the library.\n\n\n\n\nUNPKG CDN\n\n\nscript\n \nsrc\n=\nhttps://unpkg.com/rebilly-js-token/dist/rebilly.js\n/\nscript\n\n\n\n\n\njsDelivr CDN\n\n\nscript\n \nsrc\n=\nhttps://cdn.jsdelivr.net/npm/rebilly-js-token/dist/rebilly.min.js\n/\nscript\n\n\n\n\n\nThe library is then available in the global scope as \nRebilly\n.\n\n\nAuthentication\n\n\nOnce included in your checkout page, authenticate your token requests using a signature generated by one of Rebilly's server-side SDKs using your secret API key. The authentication must happen before a token is to be created.\n\n\n\n\nRebilly PHP SDK\n\n\nRebilly .NET SDK\n\n\nRebilly JS SDK (Node)\n\n\n\n\nRebilly\n.\nsetAuth\n(\nauthentication-signature-value\n);\n\n\n\n\n\n\n\nSee \nGenerating a signature\n for more details.\n\n\n\n\nCreating a token\n\n\nTo create a token you must provide two parameters: the form or object literal with the payment instrument data (payment card or bank account) and a callback function that will receive the resulting token from the Rebilly API.\n\n\n\n\nForm Submission\n\n\nWhen creating a token, prevent the default submission of the form until a value is returned by the API and injected into your page.\n\n\n\n\nRebilly\n.\ncreateToken\n(\nNode\n|\nObject\n,\n \nFunction\n)\n\n\n\n\n\nBuilding the payment instrument data\n\n\nThe first parameter will be the payment instrument data. You can use either a form node in your page or a plain object literal.\n\n\nParse a form for the payment instrument\n\n\nThe library can look for field with the \ndata-rebilly\n attribute and compile the data from your form directly. Specify the field name associated in Rebilly as \ndata-rebilly=\nfieldName\n.\n\n\nYou can omit providing a \nmethod\n field, the library will detect it based on which fields you specified.\n\n\n\n\nPCI Compliance\n\n\nNever define \nname\n attributes for the payment card fields in your form. This will prevent field data from showing up in your server logs.\n\n\n\n\nform\n\n    \ninput\n \ndata-rebilly\n=\npan\n\n    \ninput\n \ntype\n=\nnumber\n \ndata-rebilly\n=\nexpYear\n\n    \ninput\n \ntype\n=\nnumber\n \ndata-rebilly\n=\nexpMonth\n\n    \ninput\n \ntype\n=\nnumber\n \ndata-rebilly\n=\ncvv\n\n\n/\nform\n\n\n\n\n\nUsing the form above the library will detect a payment card.\n\n\nvar\n \nform\n \n=\n \ndocument\n.\ngetElementsByTagName\n(\nform\n)[\n0\n];\n\n\nRebilly\n.\ncreateToken\n(\nform\n,\n \ncallback\n);\n\n\n\n\n\nUse an object literal\n\n\nAlternatively use an object literal built following the API specification for defining a payment instrument. The accepted \nmethod\n values are \npayment-card\n and \nach\n (bank account).\n\nvar\n \npayload\n \n=\n \n{\n\n    \nmethod\n:\n \npayment-card\n,\n\n    \npaymentInstrument\n:\n \n{\n\n        \npan\n:\n \n4111111111111111\n,\n\n        \nexpYear\n:\n \n2022\n,\n\n        \nexpMonth\n:\n \n12\n,\n\n        \ncvv\n:\n \n123\n\n    \n}\n\n\n};\n\n\nRebilly\n.\ncreateToken\n(\npayload\n,\n \ncallback\n);\n\n\n\n\nDefine the callback\n\n\nThe callback function should be used to inject the token returned by the API into your form. Once submitted, use the value in conjunction with one of the server-side SDKs to create the customer.\n\n\n// the token is returned as response.data.id\n\n\nvar\n \ncallback\n \n=\n \nfunction\n \n(\nresponse\n)\n \n{\n\n    \n// create a hidden input field\n\n    \nvar\n \ntokenField\n \n=\n \ndocument\n.\ncreateElement\n(\ninput\n);\n\n    \ntokenField\n.\nsetAttribute\n(\ntype\n,\n \nhidden\n);\n\n    \ntokenField\n.\nsetAttribute\n(\nname\n,\n \npayment-token\n);\n\n    \ntokenField\n.\nvalue\n \n=\n \nresponse\n.\ndata\n.\nid\n;\n\n    \n// append to the form and submit to the server\n\n    \nform\n.\nappendChild\n(\ntokenField\n);\n\n    \nform\n.\nsubmit\n();\n\n\n};\n\n\n\nRebilly\n.\ncreateToken\n(\nform\n,\n \ncallback\n);\n\n\n\n\n\nCallback Argument\n\nThe argument received by the callback contains additional information on the API request and can be used to detect validation errors.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nerror\n\n\nboolean\n\n\nDefines whether there was an error with the request or not.\n\n\n\n\n\n\nmessage\n\n\nstring\n\n\nThe response message. Returns \nsuccess\n if there was no errors, or the error message.\n\n\n\n\n\n\nstatus\n\n\nnumber\n\n\nThe status code returned by the response.\n\n\n\n\n\n\ndata\n\n\nObject\n\n\nThe response data as returned by the API. The token is exposed as \ndata.id\n.\n\n\n\n\n\n\nxhr\n\n\nObject\n\n\nThe raw XHR request object.\n\n\n\n\n\n\n\n\nExample Form\n\n\nWhen combined together the most basic version of the page would look like the following example:", 
            "title": "Getting Started"
        }, 
        {
            "location": "/getting-started/#getting-started", 
            "text": "The library must be inserted in the page you will use to handle payment instrument data for either payment cards or bank accounts.    Server-side SDK  You must use one of the official Rebilly server-side SDKs to generate a public signature from your secret API key. See  Authentication  for more details.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/getting-started/#including-rebillyjs", 
            "text": "Add Rebilly.js to your page using one of the following CDN providers, preferably at the bottom before the  /body .    Always use  HTTPS  when including the library.   UNPKG CDN  script   src = https://unpkg.com/rebilly-js-token/dist/rebilly.js / script   jsDelivr CDN  script   src = https://cdn.jsdelivr.net/npm/rebilly-js-token/dist/rebilly.min.js / script   The library is then available in the global scope as  Rebilly .", 
            "title": "Including Rebilly.js"
        }, 
        {
            "location": "/getting-started/#authentication", 
            "text": "Once included in your checkout page, authenticate your token requests using a signature generated by one of Rebilly's server-side SDKs using your secret API key. The authentication must happen before a token is to be created.   Rebilly PHP SDK  Rebilly .NET SDK  Rebilly JS SDK (Node)   Rebilly . setAuth ( authentication-signature-value );    See  Generating a signature  for more details.", 
            "title": "Authentication"
        }, 
        {
            "location": "/getting-started/#creating-a-token", 
            "text": "To create a token you must provide two parameters: the form or object literal with the payment instrument data (payment card or bank account) and a callback function that will receive the resulting token from the Rebilly API.   Form Submission  When creating a token, prevent the default submission of the form until a value is returned by the API and injected into your page.   Rebilly . createToken ( Node | Object ,   Function )", 
            "title": "Creating a token"
        }, 
        {
            "location": "/getting-started/#building-the-payment-instrument-data", 
            "text": "The first parameter will be the payment instrument data. You can use either a form node in your page or a plain object literal.  Parse a form for the payment instrument  The library can look for field with the  data-rebilly  attribute and compile the data from your form directly. Specify the field name associated in Rebilly as  data-rebilly= fieldName .  You can omit providing a  method  field, the library will detect it based on which fields you specified.   PCI Compliance  Never define  name  attributes for the payment card fields in your form. This will prevent field data from showing up in your server logs.   form \n     input   data-rebilly = pan \n     input   type = number   data-rebilly = expYear \n     input   type = number   data-rebilly = expMonth \n     input   type = number   data-rebilly = cvv  / form   Using the form above the library will detect a payment card.  var   form   =   document . getElementsByTagName ( form )[ 0 ];  Rebilly . createToken ( form ,   callback );   Use an object literal  Alternatively use an object literal built following the API specification for defining a payment instrument. The accepted  method  values are  payment-card  and  ach  (bank account). var   payload   =   { \n     method :   payment-card , \n     paymentInstrument :   { \n         pan :   4111111111111111 , \n         expYear :   2022 , \n         expMonth :   12 , \n         cvv :   123 \n     }  };  Rebilly . createToken ( payload ,   callback );", 
            "title": "Building the payment instrument data"
        }, 
        {
            "location": "/getting-started/#define-the-callback", 
            "text": "The callback function should be used to inject the token returned by the API into your form. Once submitted, use the value in conjunction with one of the server-side SDKs to create the customer.  // the token is returned as response.data.id  var   callback   =   function   ( response )   { \n     // create a hidden input field \n     var   tokenField   =   document . createElement ( input ); \n     tokenField . setAttribute ( type ,   hidden ); \n     tokenField . setAttribute ( name ,   payment-token ); \n     tokenField . value   =   response . data . id ; \n     // append to the form and submit to the server \n     form . appendChild ( tokenField ); \n     form . submit ();  };  Rebilly . createToken ( form ,   callback );   Callback Argument \nThe argument received by the callback contains additional information on the API request and can be used to detect validation errors.     Property  Type  Description      error  boolean  Defines whether there was an error with the request or not.    message  string  The response message. Returns  success  if there was no errors, or the error message.    status  number  The status code returned by the response.    data  Object  The response data as returned by the API. The token is exposed as  data.id .    xhr  Object  The raw XHR request object.", 
            "title": "Define the callback"
        }, 
        {
            "location": "/getting-started/#example-form", 
            "text": "When combined together the most basic version of the page would look like the following example:", 
            "title": "Example Form"
        }, 
        {
            "location": "/license/", 
            "text": "License\n\n\nMIT License\n\n\nCopyright (c) 2017, Rebilly, Inc.\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.", 
            "title": "License"
        }, 
        {
            "location": "/license/#license", 
            "text": "MIT License  Copyright (c) 2017, Rebilly, Inc.  Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.", 
            "title": "License"
        }
    ]
}